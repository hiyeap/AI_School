{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6250476f",
   "metadata": {},
   "source": [
    "## 요구사항 분석 및 문제 정의\n",
    " - 간단한 EDA와 관련된 함수를 학습\n",
    " - BMI 데이터를 확인해보고 잘 분류가 될 수 있는지 시각화\n",
    " - KNN의 개념에 대해 학습\n",
    " - KNN을 이용해서 학습\n",
    " - 머신러닝 프로세스에 대해 학습"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "723317df",
   "metadata": {},
   "source": [
    "## 데이터 수집"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04aa5507",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Height  Weight       Label\n",
       "0    Male     174      96     Obesity\n",
       "1    Male     189      87      Normal\n",
       "2  Female     185     110     Obesity\n",
       "3  Female     195     104  Overweight\n",
       "4    Male     149      61  Overweight"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "bmi = pd.read_csv('data/bmi_500.csv')\n",
    "bmi.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3475c906",
   "metadata": {},
   "source": [
    "## EDA(탐색적 데이터 분석)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "59320111",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Height  Weight       Label\n",
       "0    Male     174      96     Obesity\n",
       "1    Male     189      87      Normal\n",
       "2  Female     185     110     Obesity\n",
       "3  Female     195     104  Overweight\n",
       "4    Male     149      61  Overweight"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 처음부터 일부 데이터를 확인\n",
    "# 괄호 안에 숫자를 입력하면 해당 숫자만큼 출력\n",
    "bmi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb36bd2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>Female</td>\n",
       "      <td>150</td>\n",
       "      <td>153</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>Female</td>\n",
       "      <td>184</td>\n",
       "      <td>121</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>Female</td>\n",
       "      <td>141</td>\n",
       "      <td>136</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>Male</td>\n",
       "      <td>150</td>\n",
       "      <td>95</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>Male</td>\n",
       "      <td>173</td>\n",
       "      <td>131</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Height  Weight            Label\n",
       "495  Female     150     153  Extreme Obesity\n",
       "496  Female     184     121          Obesity\n",
       "497  Female     141     136  Extreme Obesity\n",
       "498    Male     150      95  Extreme Obesity\n",
       "499    Male     173     131  Extreme Obesity"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 끝부터 일부 데이터를 확인\n",
    "bmi.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5d4fe4b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 4 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   Gender  500 non-null    object\n",
      " 1   Height  500 non-null    int64 \n",
      " 2   Weight  500 non-null    int64 \n",
      " 3   Label   500 non-null    object\n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 15.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# 데이터의 정보를 출력하는 함수\n",
    "# 데이터의 수, 컬럼의 수, 컬럼의 특성/데이터 타입 - 결측치 확인\n",
    "# Dtype : object(범주형), int/float(수치형)\n",
    "bmi.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0e4e0760",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Male', 'Female'], dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 범주형 컬럼의 클래스의 목록을 출력하는 함수\n",
    "bmi['Gender'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "479baf87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Female    255\n",
      "Male      245\n",
      "Name: Gender, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#  범주형 컬럼의 클래스별 개수를 확인\n",
    "# 데이터가 한쪽으로 치우쳐 있는지 확인\n",
    "print(bmi['Gender'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ec383eb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.12191368980139153\n",
      "-0.037692236922098034\n"
     ]
    }
   ],
   "source": [
    "# 수치형 데이터의 편향(치우침)을 확인하는 함수\n",
    "# 0이면 정규분포\n",
    "# 양수이면 왼쪽으로 치우친 데이터이고 음수이면 오른쪽으로 치우친 데이터를 표시\n",
    "print(bmi[\"Height\"].skew())\n",
    "print(bmi[\"Weight\"].skew())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "10dc874f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>169.944000</td>\n",
       "      <td>106.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>16.375261</td>\n",
       "      <td>32.382607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>140.000000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>156.000000</td>\n",
       "      <td>80.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>170.500000</td>\n",
       "      <td>106.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>184.000000</td>\n",
       "      <td>136.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>199.000000</td>\n",
       "      <td>160.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Height      Weight\n",
       "count  500.000000  500.000000\n",
       "mean   169.944000  106.000000\n",
       "std     16.375261   32.382607\n",
       "min    140.000000   50.000000\n",
       "25%    156.000000   80.000000\n",
       "50%    170.500000  106.000000\n",
       "75%    184.000000  136.000000\n",
       "max    199.000000  160.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 데이터의 간단한 기술통계를 보여주는 함수\n",
    "# 데이터의 개수, 평균, 표준편차, 최소/25%/중간값/75%/최대값\n",
    "# 결측치(count), 이상치(std), 편향(비율확인, 치우침정도)\n",
    "bmi.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8ebc21d",
   "metadata": {},
   "source": [
    "### BMI 데이터가 분류가 될 수 있는 데이터인지 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7a547311",
   "metadata": {},
   "outputs": [],
   "source": [
    "# matplotlib ; 파이썬 그래프 시각화 도구\n",
    "# seaborn : matplotlib에 고급 그래프 시각화 도구를 제공\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# scatter : 산포도를 그리는 함수 (2차원 좌표에 점을 찍는 함수)\n",
    "# x 좌표 : Weight, y좌표 : Height\n",
    "def myScatter(label, color):\n",
    "    # 파라미터로 넘어온 라벨값들을 저장 - 불리언 인덱싱\n",
    "    tmp = bmi[bmi[\"Label\"] == label]\n",
    "    \n",
    "    # 입력한 라벨값만 산포도를 그림\n",
    "    # scatter(x좌표, y좌표, 색상, 라벨)\n",
    "    plt.scatter(tmp[\"Weight\"], tmp[\"Height\"], c= color, label=label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "27ed7e43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Obesity', 'Normal', 'Overweight', 'Extreme Obesity', 'Weak',\n",
       "       'Extremely Weak'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bmi[\"Label\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6503752c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 그래프의 크기 설정\n",
    "plt.figure(figsize=(10,10))\n",
    "\n",
    "myScatter(\"Obesity\",\"orange\")\n",
    "myScatter(\"Normal\",\"black\")\n",
    "myScatter(\"Overweight\",\"pink\")\n",
    "myScatter(\"Extreme Obesity\",\"red\")\n",
    "myScatter(\"Weak\",\"cyan\")\n",
    "myScatter(\"Extremely Weak\",\"blue\")\n",
    "\n",
    "# 범례 추가(loc : 범례의 위치)\n",
    "# loc를 써주지 않으면 알아서 데이터가 가장 작게 분포된 위치에 표시\n",
    "# prop={'size': } : 범례 size\n",
    "plt.legend(loc = \"upper right\", prop={'size':8})\n",
    "\n",
    "# 축 눈금의 범위 설정\n",
    "plt.xlim(40,180)\n",
    "plt.ylim(130,210)\n",
    "\n",
    "# 축 라벨 표시(기본적으로 한글지원x)\n",
    "plt.xlabel(\"Weight\")\n",
    "plt.ylabel(\"Height\")\n",
    "\n",
    "# 제목 표시\n",
    "plt.title(\"BMI data\")\n",
    "\n",
    "# 격자 표시\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7acfebf",
   "metadata": {},
   "source": [
    "### 학습 데이터로 변환\n",
    "- 특성데이터와 라벨데이터로 분리\n",
    "- 훈련데이터와 테스트데이터로 분리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5f94769b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>Female</td>\n",
       "      <td>150</td>\n",
       "      <td>153</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>Female</td>\n",
       "      <td>184</td>\n",
       "      <td>121</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>Female</td>\n",
       "      <td>141</td>\n",
       "      <td>136</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>Male</td>\n",
       "      <td>150</td>\n",
       "      <td>95</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>Male</td>\n",
       "      <td>173</td>\n",
       "      <td>131</td>\n",
       "      <td>Extreme Obesity</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Height  Weight            Label\n",
       "0      Male     174      96          Obesity\n",
       "1      Male     189      87           Normal\n",
       "2    Female     185     110          Obesity\n",
       "3    Female     195     104       Overweight\n",
       "4      Male     149      61       Overweight\n",
       "..      ...     ...     ...              ...\n",
       "495  Female     150     153  Extreme Obesity\n",
       "496  Female     184     121          Obesity\n",
       "497  Female     141     136  Extreme Obesity\n",
       "498    Male     150      95  Extreme Obesity\n",
       "499    Male     173     131  Extreme Obesity\n",
       "\n",
       "[500 rows x 4 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bmi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f90e7354",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 특성데이터와 라벨데이터로 분리\n",
    "bmi_X = bmi.iloc[:,1:3]\n",
    "bmi_y = bmi.iloc[:,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42209512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>150</td>\n",
       "      <td>153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>184</td>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>141</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>150</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>173</td>\n",
       "      <td>131</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Height  Weight\n",
       "0       174      96\n",
       "1       189      87\n",
       "2       185     110\n",
       "3       195     104\n",
       "4       149      61\n",
       "..      ...     ...\n",
       "495     150     153\n",
       "496     184     121\n",
       "497     141     136\n",
       "498     150      95\n",
       "499     173     131\n",
       "\n",
       "[500 rows x 2 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bmi_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2efe4224",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              Obesity\n",
       "1               Normal\n",
       "2              Obesity\n",
       "3           Overweight\n",
       "4           Overweight\n",
       "            ...       \n",
       "495    Extreme Obesity\n",
       "496            Obesity\n",
       "497    Extreme Obesity\n",
       "498    Extreme Obesity\n",
       "499    Extreme Obesity\n",
       "Name: Label, Length: 500, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bmi_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "283e7087",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((350, 2), (350,), (150, 2), (150,))"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 훈련데이터와 테스트데이터로 분리(훈련 70%, 테스트 30%)\n",
    "X_train = bmi_X[:350]\n",
    "y_train = bmi_y[:350]\n",
    "X_test = bmi_X[350:]\n",
    "y_test = bmi_y[350:]\n",
    "\n",
    "X_train.shape, y_train.shape, X_test.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "936123e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>345</th>\n",
       "      <td>184</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>191</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>162</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348</th>\n",
       "      <td>178</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349</th>\n",
       "      <td>157</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>350 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Height  Weight\n",
       "0       174      96\n",
       "1       189      87\n",
       "2       185     110\n",
       "3       195     104\n",
       "4       149      61\n",
       "..      ...     ...\n",
       "345     184     106\n",
       "346     191      68\n",
       "347     162      58\n",
       "348     178     138\n",
       "349     157      60\n",
       "\n",
       "[350 rows x 2 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d8fb737",
   "metadata": {},
   "source": [
    "## KNN으로 BMI 데이터 학습"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e94cc376",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=3)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# n_neighbors : 이웃의 수\n",
    "# 이웃의 수가 적으면 과대적합\n",
    "# 이웃의 수가 많으면 과소적합\n",
    "# Hyper Parameter Tuning: 적당한 이웃의 수를 결정하는 것\n",
    "knn_model = KNeighborsClassifier(n_neighbors=3)\n",
    "# 훈련은 훈련데이터로!\n",
    "knn_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "41af2c81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "훈련 정확도 :  0.9342857142857143\n",
      "테스트 정확도 :  0.9\n"
     ]
    }
   ],
   "source": [
    "# 정확도 계산\n",
    "# 훈련정확도와 테스트정확도가 모두 낮으면 -> 과소적합\n",
    "# 훈련정확도보다 테스트정확도가 높으면 -> 과소적합\n",
    "# 훈련정확도보다 테스트정확도가 크게 차이나면 -> 과대적합\n",
    "# 일반화모델 : 훈련정확도가 테스트정확도보다 약간 높은 모델!\n",
    "print(\"훈련 정확도 : \", knn_model.score(X_train, y_train))\n",
    "print(\"테스트 정확도 : \", knn_model.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f263095f",
   "metadata": {},
   "source": [
    "#### 이웃의 수가 감소하면 과대적합이 생김"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9efaea82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "훈련 정확도 :  1.0\n",
      "테스트 정확도 :  0.8933333333333333\n"
     ]
    }
   ],
   "source": [
    "knn_model2 = KNeighborsClassifier(n_neighbors=1)\n",
    "knn_model2.fit(X_train, y_train)\n",
    "print(\"훈련 정확도 : \", knn_model2.score(X_train, y_train))\n",
    "print(\"테스트 정확도 : \", knn_model2.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3c7cd620",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "훈련 정확도 :  0.9085714285714286\n",
      "테스트 정확도 :  0.94\n"
     ]
    }
   ],
   "source": [
    "knn_model3 = KNeighborsClassifier(n_neighbors=10)\n",
    "knn_model3.fit(X_train, y_train)\n",
    "print(\"훈련 정확도 : \", knn_model3.score(X_train, y_train))\n",
    "print(\"테스트 정확도 : \", knn_model3.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38a9a6db",
   "metadata": {},
   "source": [
    "#### 일반화된 모델을 찾아보자. - 하이퍼파라미터 튜닝"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c21fdbff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 이웃의 수마다의 정확도\n",
    "train_acc = []\n",
    "test_acc = []\n",
    "\n",
    "# 사용할 이웃의 범위 값들을 정의!\n",
    "neighbor = range(1,20)\n",
    "for n in neighbor:\n",
    "    knn_model = KNeighborsClassifier(n_neighbors=n)\n",
    "    knn_model.fit(X_train, y_train)\n",
    "    \n",
    "    # 이웃의 수마다의 훈련데이터 정확도와 테스트데이터 정확도를 리스트에 저장\n",
    "    train_acc.append(knn_model.score(X_train, y_train))\n",
    "    test_acc.append(knn_model.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e93001f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0,\n",
       " 0.9485714285714286,\n",
       " 0.9342857142857143,\n",
       " 0.9514285714285714,\n",
       " 0.9257142857142857,\n",
       " 0.9085714285714286,\n",
       " 0.9028571428571428,\n",
       " 0.9057142857142857,\n",
       " 0.9057142857142857,\n",
       " 0.9085714285714286,\n",
       " 0.9085714285714286,\n",
       " 0.9114285714285715,\n",
       " 0.9114285714285715,\n",
       " 0.9,\n",
       " 0.8942857142857142,\n",
       " 0.8971428571428571,\n",
       " 0.9,\n",
       " 0.88,\n",
       " 0.8857142857142857]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c37bc042",
   "metadata": {},
   "source": [
    "#### 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f671d2af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(neighbor, train_acc, label=\"Train\")\n",
    "plt.plot(neighbor, test_acc, label=\"Test\")\n",
    "plt.xticks(range(1,20))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b560346",
   "metadata": {},
   "source": [
    "### 특성의 수를 증가시켜서 과소적합을 줄여보자!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7c74735f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Height  Weight       Label\n",
       "0    Male     174      96     Obesity\n",
       "1    Male     189      87      Normal\n",
       "2  Female     185     110     Obesity\n",
       "3  Female     195     104  Overweight\n",
       "4    Male     149      61  Overweight"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bmi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "54971135",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Male'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bmi['Gender'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "469b840f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>Obesity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "      <td>Overweight</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Height  Weight       Label\n",
       "0       0     174      96     Obesity\n",
       "1       0     189      87      Normal\n",
       "2       1     185     110     Obesity\n",
       "3       1     195     104  Overweight\n",
       "4       0     149      61  Overweight"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gender 컬럼에서 Male -> 0으로 Female -> 1로 변경!\n",
    "bmi['Gender'] = bmi['Gender'].replace(\"Male\",0).replace(\"Female\", 1)\n",
    "#  bmi['Gender'].replace(['Male', 'Female'], [0,1])\n",
    "#  bmi['Gender'].map({\"Male\":0, \"Female\":1})\n",
    "bmi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2b82de81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 특성데이터와 라벨데이터로 분리\n",
    "bmi_X = bmi.iloc[:,0:3]\n",
    "bmi_y = bmi.iloc[:,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "86bc7c67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((350, 3), (350,), (150, 3), (150,))"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 훈련데이터와 테스트데이터로 분리(훈련 70%, 테스트 30%)\n",
    "X_train = bmi_X[:350]\n",
    "y_train = bmi_y[:350]\n",
    "X_test = bmi_X[350:]\n",
    "y_test = bmi_y[350:]\n",
    "\n",
    "X_train.shape, y_train.shape, X_test.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3e2100b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 이웃의 수마다의 정확도\n",
    "train_acc = []\n",
    "test_acc = []\n",
    "\n",
    "# 사용할 이웃의 범위 값들을 정의!\n",
    "neighbor = range(1,20)\n",
    "for n in neighbor:\n",
    "    knn_model = KNeighborsClassifier(n_neighbors=n)\n",
    "    knn_model.fit(X_train, y_train)\n",
    "    \n",
    "    # 이웃의 수마다의 훈련데이터 정확도와 테스트데이터 정확도를 리스트에 저장\n",
    "    train_acc.append(knn_model.score(X_train, y_train))\n",
    "    test_acc.append(knn_model.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "61bfaa00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 시각화\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(neighbor, train_acc, label=\"Train\")\n",
    "plt.plot(neighbor, test_acc, label=\"Test\")\n",
    "plt.xticks(range(1,20))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d043299b",
   "metadata": {},
   "source": [
    "#### 특성들끼리 각각 곱해서 새로운 특성을 추가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d5fac945",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>GenderxGender</th>\n",
       "      <th>GenderxHeight</th>\n",
       "      <th>GenderxWeight</th>\n",
       "      <th>HeightxHeight</th>\n",
       "      <th>HeightxWeight</th>\n",
       "      <th>WeightxWeight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>174</td>\n",
       "      <td>96</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30276</td>\n",
       "      <td>16704</td>\n",
       "      <td>9216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>189</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35721</td>\n",
       "      <td>16443</td>\n",
       "      <td>7569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>1</td>\n",
       "      <td>185</td>\n",
       "      <td>110</td>\n",
       "      <td>34225</td>\n",
       "      <td>20350</td>\n",
       "      <td>12100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>1</td>\n",
       "      <td>195</td>\n",
       "      <td>104</td>\n",
       "      <td>38025</td>\n",
       "      <td>20280</td>\n",
       "      <td>10816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>149</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22201</td>\n",
       "      <td>9089</td>\n",
       "      <td>3721</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Height  Weight  GenderxGender  GenderxHeight  GenderxWeight  \\\n",
       "0       0     174      96              0              0              0   \n",
       "1       0     189      87              0              0              0   \n",
       "2       1     185     110              1            185            110   \n",
       "3       1     195     104              1            195            104   \n",
       "4       0     149      61              0              0              0   \n",
       "\n",
       "   HeightxHeight  HeightxWeight  WeightxWeight  \n",
       "0          30276          16704           9216  \n",
       "1          35721          16443           7569  \n",
       "2          34225          20350          12100  \n",
       "3          38025          20280          10816  \n",
       "4          22201           9089           3721  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train2 = X_train.copy()\n",
    "\n",
    "# 컬럼의 이름들을 가져온다\n",
    "col = X_train2.columns\n",
    "\n",
    "for i in range(col.size):\n",
    "    for j in range(i, col.size):\n",
    "        X_train2[col[i] + \"x\" + col[j]] = X_train2[col[i]] * X_train2[col[j]]\n",
    "X_train2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5c8759e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>GenderxGender</th>\n",
       "      <th>GenderxHeight</th>\n",
       "      <th>GenderxWeight</th>\n",
       "      <th>HeightxHeight</th>\n",
       "      <th>HeightxWeight</th>\n",
       "      <th>WeightxWeight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>0</td>\n",
       "      <td>184</td>\n",
       "      <td>83</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33856</td>\n",
       "      <td>15272</td>\n",
       "      <td>6889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>0</td>\n",
       "      <td>197</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38809</td>\n",
       "      <td>17336</td>\n",
       "      <td>7744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>352</th>\n",
       "      <td>1</td>\n",
       "      <td>160</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>160</td>\n",
       "      <td>51</td>\n",
       "      <td>25600</td>\n",
       "      <td>8160</td>\n",
       "      <td>2601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353</th>\n",
       "      <td>0</td>\n",
       "      <td>184</td>\n",
       "      <td>153</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33856</td>\n",
       "      <td>28152</td>\n",
       "      <td>23409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354</th>\n",
       "      <td>0</td>\n",
       "      <td>190</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36100</td>\n",
       "      <td>9500</td>\n",
       "      <td>2500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Height  Weight  GenderxGender  GenderxHeight  GenderxWeight  \\\n",
       "350       0     184      83              0              0              0   \n",
       "351       0     197      88              0              0              0   \n",
       "352       1     160      51              1            160             51   \n",
       "353       0     184     153              0              0              0   \n",
       "354       0     190      50              0              0              0   \n",
       "\n",
       "     HeightxHeight  HeightxWeight  WeightxWeight  \n",
       "350          33856          15272           6889  \n",
       "351          38809          17336           7744  \n",
       "352          25600           8160           2601  \n",
       "353          33856          28152          23409  \n",
       "354          36100           9500           2500  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test2 = X_test.copy()\n",
    "\n",
    "# 컬럼의 이름들을 가져온다\n",
    "col = X_test2.columns\n",
    "\n",
    "for i in range(col.size):\n",
    "    for j in range(i, col.size):\n",
    "        X_test2[col[i] + \"x\" + col[j]] = X_test2[col[i]] * X_test2[col[j]]\n",
    "X_test2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8208707e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 이웃의 수마다의 정확도\n",
    "train_acc = []\n",
    "test_acc = []\n",
    "\n",
    "# 사용할 이웃의 범위 값들을 정의!\n",
    "neighbor = range(1,20)\n",
    "for n in neighbor:\n",
    "    knn_model = KNeighborsClassifier(n_neighbors=n)\n",
    "    knn_model.fit(X_train2, y_train)\n",
    "    \n",
    "    # 이웃의 수마다의 훈련데이터 정확도와 테스트데이터 정확도를 리스트에 저장\n",
    "    train_acc.append(knn_model.score(X_train2, y_train))\n",
    "    test_acc.append(knn_model.score(X_test2, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "67909495",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 시각화\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(neighbor, train_acc, label=\"Train\")\n",
    "plt.plot(neighbor, test_acc, label=\"Test\")\n",
    "plt.xticks(range(1,20))\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "317fbada",
   "metadata": {},
   "source": [
    "## 보스턴집값 데이터를 이용한 KNN 회귀"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "200833cd",
   "metadata": {},
   "source": [
    "### 문제정의\n",
    "- 보스턴 집값 데이터에서 어떤 특성이 집값에 얼마만큼 영향을 주는지 분석\n",
    "- 다중 공선성 문제에 대한 이해\n",
    "- KNN을 이용한 회귀분석"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8991c43",
   "metadata": {},
   "source": [
    "### 데이터 수집"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce79a25e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sklearn에서는 교육용 데이터셋으로 딕셔너리 형태로 데이터를 제공\n",
    "from sklearn.datasets import load_boston\n",
    "\n",
    "boston = load_boston()\n",
    "\n",
    "boston.keys()\n",
    "# data : 특성 데이터\n",
    "# target : 라벨 데이터\n",
    "# feature_names : 컬럼명\n",
    "# DESCR : 컬럼에 대한 설명"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aa8049c",
   "metadata": {},
   "source": [
    "### 데이터 시각화 및 분석\n",
    "- 딕셔너리를 데이터프레임으로 변환\n",
    "- 특성과 라벨 간의 상관관계 분석\n",
    "- 분석 결과를 히트맵으로 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "88888cf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
       "0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
       "1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
       "2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
       "3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
       "4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  \n",
       "0     15.3  396.90   4.98  \n",
       "1     17.8  396.90   9.14  \n",
       "2     17.8  392.83   4.03  \n",
       "3     18.7  394.63   2.94  \n",
       "4     18.7  396.90   5.33  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df_feature = pd.DataFrame(boston[\"data\"], columns = boston[\"feature_names\"])\n",
    "df_feature.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad02d934",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 506 entries, 0 to 505\n",
      "Data columns (total 13 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   CRIM     506 non-null    float64\n",
      " 1   ZN       506 non-null    float64\n",
      " 2   INDUS    506 non-null    float64\n",
      " 3   CHAS     506 non-null    float64\n",
      " 4   NOX      506 non-null    float64\n",
      " 5   RM       506 non-null    float64\n",
      " 6   AGE      506 non-null    float64\n",
      " 7   DIS      506 non-null    float64\n",
      " 8   RAD      506 non-null    float64\n",
      " 9   TAX      506 non-null    float64\n",
      " 10  PTRATIO  506 non-null    float64\n",
      " 11  B        506 non-null    float64\n",
      " 12  LSTAT    506 non-null    float64\n",
      "dtypes: float64(13)\n",
      "memory usage: 51.5 KB\n"
     ]
    }
   ],
   "source": [
    "df_feature.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5f702611",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.613524</td>\n",
       "      <td>11.363636</td>\n",
       "      <td>11.136779</td>\n",
       "      <td>0.069170</td>\n",
       "      <td>0.554695</td>\n",
       "      <td>6.284634</td>\n",
       "      <td>68.574901</td>\n",
       "      <td>3.795043</td>\n",
       "      <td>9.549407</td>\n",
       "      <td>408.237154</td>\n",
       "      <td>18.455534</td>\n",
       "      <td>356.674032</td>\n",
       "      <td>12.653063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.601545</td>\n",
       "      <td>23.322453</td>\n",
       "      <td>6.860353</td>\n",
       "      <td>0.253994</td>\n",
       "      <td>0.115878</td>\n",
       "      <td>0.702617</td>\n",
       "      <td>28.148861</td>\n",
       "      <td>2.105710</td>\n",
       "      <td>8.707259</td>\n",
       "      <td>168.537116</td>\n",
       "      <td>2.164946</td>\n",
       "      <td>91.294864</td>\n",
       "      <td>7.141062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.006320</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.460000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.385000</td>\n",
       "      <td>3.561000</td>\n",
       "      <td>2.900000</td>\n",
       "      <td>1.129600</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>12.600000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>1.730000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.082045</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.190000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.449000</td>\n",
       "      <td>5.885500</td>\n",
       "      <td>45.025000</td>\n",
       "      <td>2.100175</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>279.000000</td>\n",
       "      <td>17.400000</td>\n",
       "      <td>375.377500</td>\n",
       "      <td>6.950000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.256510</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.690000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.538000</td>\n",
       "      <td>6.208500</td>\n",
       "      <td>77.500000</td>\n",
       "      <td>3.207450</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>330.000000</td>\n",
       "      <td>19.050000</td>\n",
       "      <td>391.440000</td>\n",
       "      <td>11.360000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.677083</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>18.100000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.624000</td>\n",
       "      <td>6.623500</td>\n",
       "      <td>94.075000</td>\n",
       "      <td>5.188425</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>666.000000</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>396.225000</td>\n",
       "      <td>16.955000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>88.976200</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>27.740000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.871000</td>\n",
       "      <td>8.780000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>12.126500</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>711.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>396.900000</td>\n",
       "      <td>37.970000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CRIM          ZN       INDUS        CHAS         NOX          RM  \\\n",
       "count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \n",
       "mean     3.613524   11.363636   11.136779    0.069170    0.554695    6.284634   \n",
       "std      8.601545   23.322453    6.860353    0.253994    0.115878    0.702617   \n",
       "min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   \n",
       "25%      0.082045    0.000000    5.190000    0.000000    0.449000    5.885500   \n",
       "50%      0.256510    0.000000    9.690000    0.000000    0.538000    6.208500   \n",
       "75%      3.677083   12.500000   18.100000    0.000000    0.624000    6.623500   \n",
       "max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   \n",
       "\n",
       "              AGE         DIS         RAD         TAX     PTRATIO           B  \\\n",
       "count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \n",
       "mean    68.574901    3.795043    9.549407  408.237154   18.455534  356.674032   \n",
       "std     28.148861    2.105710    8.707259  168.537116    2.164946   91.294864   \n",
       "min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   \n",
       "25%     45.025000    2.100175    4.000000  279.000000   17.400000  375.377500   \n",
       "50%     77.500000    3.207450    5.000000  330.000000   19.050000  391.440000   \n",
       "75%     94.075000    5.188425   24.000000  666.000000   20.200000  396.225000   \n",
       "max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   \n",
       "\n",
       "            LSTAT  \n",
       "count  506.000000  \n",
       "mean    12.653063  \n",
       "std      7.141062  \n",
       "min      1.730000  \n",
       "25%      6.950000  \n",
       "50%     11.360000  \n",
       "75%     16.955000  \n",
       "max     37.970000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_feature.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b32b938c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   price\n",
       "0   24.0\n",
       "1   21.6\n",
       "2   34.7\n",
       "3   33.4\n",
       "4   36.2"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_label = pd.DataFrame(boston['target'], columns = ['price'])\n",
    "df_label.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1d0b2ccd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>0.06263</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.593</td>\n",
       "      <td>69.1</td>\n",
       "      <td>2.4786</td>\n",
       "      <td>1.0</td>\n",
       "      <td>273.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>391.99</td>\n",
       "      <td>9.67</td>\n",
       "      <td>22.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>0.04527</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.120</td>\n",
       "      <td>76.7</td>\n",
       "      <td>2.2875</td>\n",
       "      <td>1.0</td>\n",
       "      <td>273.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.08</td>\n",
       "      <td>20.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>0.06076</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.976</td>\n",
       "      <td>91.0</td>\n",
       "      <td>2.1675</td>\n",
       "      <td>1.0</td>\n",
       "      <td>273.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.64</td>\n",
       "      <td>23.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>0.10959</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.794</td>\n",
       "      <td>89.3</td>\n",
       "      <td>2.3889</td>\n",
       "      <td>1.0</td>\n",
       "      <td>273.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>393.45</td>\n",
       "      <td>6.48</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>0.04741</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.030</td>\n",
       "      <td>80.8</td>\n",
       "      <td>2.5050</td>\n",
       "      <td>1.0</td>\n",
       "      <td>273.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>7.88</td>\n",
       "      <td>11.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>506 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
       "0    0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
       "1    0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
       "2    0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
       "3    0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
       "4    0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
       "..       ...   ...    ...   ...    ...    ...   ...     ...  ...    ...   \n",
       "501  0.06263   0.0  11.93   0.0  0.573  6.593  69.1  2.4786  1.0  273.0   \n",
       "502  0.04527   0.0  11.93   0.0  0.573  6.120  76.7  2.2875  1.0  273.0   \n",
       "503  0.06076   0.0  11.93   0.0  0.573  6.976  91.0  2.1675  1.0  273.0   \n",
       "504  0.10959   0.0  11.93   0.0  0.573  6.794  89.3  2.3889  1.0  273.0   \n",
       "505  0.04741   0.0  11.93   0.0  0.573  6.030  80.8  2.5050  1.0  273.0   \n",
       "\n",
       "     PTRATIO       B  LSTAT  price  \n",
       "0       15.3  396.90   4.98   24.0  \n",
       "1       17.8  396.90   9.14   21.6  \n",
       "2       17.8  392.83   4.03   34.7  \n",
       "3       18.7  394.63   2.94   33.4  \n",
       "4       18.7  396.90   5.33   36.2  \n",
       "..       ...     ...    ...    ...  \n",
       "501     21.0  391.99   9.67   22.4  \n",
       "502     21.0  396.90   9.08   20.6  \n",
       "503     21.0  396.90   5.64   23.9  \n",
       "504     21.0  393.45   6.48   22.0  \n",
       "505     21.0  396.90   7.88   11.9  \n",
       "\n",
       "[506 rows x 14 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 특성 데이터와 라벨 데이터를 하나의 데이터프레임으로 병합 -> concat()\n",
    "# axis=1 : 열 방향으로 병합\n",
    "df_boston = pd.concat([df_feature, df_label], axis=1)\n",
    "df_boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d336055",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CRIM</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.200469</td>\n",
       "      <td>0.406583</td>\n",
       "      <td>-0.055892</td>\n",
       "      <td>0.420972</td>\n",
       "      <td>-0.219247</td>\n",
       "      <td>0.352734</td>\n",
       "      <td>-0.379670</td>\n",
       "      <td>0.625505</td>\n",
       "      <td>0.582764</td>\n",
       "      <td>0.289946</td>\n",
       "      <td>-0.385064</td>\n",
       "      <td>0.455621</td>\n",
       "      <td>-0.388305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN</th>\n",
       "      <td>-0.200469</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.533828</td>\n",
       "      <td>-0.042697</td>\n",
       "      <td>-0.516604</td>\n",
       "      <td>0.311991</td>\n",
       "      <td>-0.569537</td>\n",
       "      <td>0.664408</td>\n",
       "      <td>-0.311948</td>\n",
       "      <td>-0.314563</td>\n",
       "      <td>-0.391679</td>\n",
       "      <td>0.175520</td>\n",
       "      <td>-0.412995</td>\n",
       "      <td>0.360445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS</th>\n",
       "      <td>0.406583</td>\n",
       "      <td>-0.533828</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.062938</td>\n",
       "      <td>0.763651</td>\n",
       "      <td>-0.391676</td>\n",
       "      <td>0.644779</td>\n",
       "      <td>-0.708027</td>\n",
       "      <td>0.595129</td>\n",
       "      <td>0.720760</td>\n",
       "      <td>0.383248</td>\n",
       "      <td>-0.356977</td>\n",
       "      <td>0.603800</td>\n",
       "      <td>-0.483725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS</th>\n",
       "      <td>-0.055892</td>\n",
       "      <td>-0.042697</td>\n",
       "      <td>0.062938</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.091203</td>\n",
       "      <td>0.091251</td>\n",
       "      <td>0.086518</td>\n",
       "      <td>-0.099176</td>\n",
       "      <td>-0.007368</td>\n",
       "      <td>-0.035587</td>\n",
       "      <td>-0.121515</td>\n",
       "      <td>0.048788</td>\n",
       "      <td>-0.053929</td>\n",
       "      <td>0.175260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX</th>\n",
       "      <td>0.420972</td>\n",
       "      <td>-0.516604</td>\n",
       "      <td>0.763651</td>\n",
       "      <td>0.091203</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.302188</td>\n",
       "      <td>0.731470</td>\n",
       "      <td>-0.769230</td>\n",
       "      <td>0.611441</td>\n",
       "      <td>0.668023</td>\n",
       "      <td>0.188933</td>\n",
       "      <td>-0.380051</td>\n",
       "      <td>0.590879</td>\n",
       "      <td>-0.427321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM</th>\n",
       "      <td>-0.219247</td>\n",
       "      <td>0.311991</td>\n",
       "      <td>-0.391676</td>\n",
       "      <td>0.091251</td>\n",
       "      <td>-0.302188</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.240265</td>\n",
       "      <td>0.205246</td>\n",
       "      <td>-0.209847</td>\n",
       "      <td>-0.292048</td>\n",
       "      <td>-0.355501</td>\n",
       "      <td>0.128069</td>\n",
       "      <td>-0.613808</td>\n",
       "      <td>0.695360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE</th>\n",
       "      <td>0.352734</td>\n",
       "      <td>-0.569537</td>\n",
       "      <td>0.644779</td>\n",
       "      <td>0.086518</td>\n",
       "      <td>0.731470</td>\n",
       "      <td>-0.240265</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.747881</td>\n",
       "      <td>0.456022</td>\n",
       "      <td>0.506456</td>\n",
       "      <td>0.261515</td>\n",
       "      <td>-0.273534</td>\n",
       "      <td>0.602339</td>\n",
       "      <td>-0.376955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS</th>\n",
       "      <td>-0.379670</td>\n",
       "      <td>0.664408</td>\n",
       "      <td>-0.708027</td>\n",
       "      <td>-0.099176</td>\n",
       "      <td>-0.769230</td>\n",
       "      <td>0.205246</td>\n",
       "      <td>-0.747881</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.494588</td>\n",
       "      <td>-0.534432</td>\n",
       "      <td>-0.232471</td>\n",
       "      <td>0.291512</td>\n",
       "      <td>-0.496996</td>\n",
       "      <td>0.249929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD</th>\n",
       "      <td>0.625505</td>\n",
       "      <td>-0.311948</td>\n",
       "      <td>0.595129</td>\n",
       "      <td>-0.007368</td>\n",
       "      <td>0.611441</td>\n",
       "      <td>-0.209847</td>\n",
       "      <td>0.456022</td>\n",
       "      <td>-0.494588</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910228</td>\n",
       "      <td>0.464741</td>\n",
       "      <td>-0.444413</td>\n",
       "      <td>0.488676</td>\n",
       "      <td>-0.381626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX</th>\n",
       "      <td>0.582764</td>\n",
       "      <td>-0.314563</td>\n",
       "      <td>0.720760</td>\n",
       "      <td>-0.035587</td>\n",
       "      <td>0.668023</td>\n",
       "      <td>-0.292048</td>\n",
       "      <td>0.506456</td>\n",
       "      <td>-0.534432</td>\n",
       "      <td>0.910228</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.460853</td>\n",
       "      <td>-0.441808</td>\n",
       "      <td>0.543993</td>\n",
       "      <td>-0.468536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO</th>\n",
       "      <td>0.289946</td>\n",
       "      <td>-0.391679</td>\n",
       "      <td>0.383248</td>\n",
       "      <td>-0.121515</td>\n",
       "      <td>0.188933</td>\n",
       "      <td>-0.355501</td>\n",
       "      <td>0.261515</td>\n",
       "      <td>-0.232471</td>\n",
       "      <td>0.464741</td>\n",
       "      <td>0.460853</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.177383</td>\n",
       "      <td>0.374044</td>\n",
       "      <td>-0.507787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>-0.385064</td>\n",
       "      <td>0.175520</td>\n",
       "      <td>-0.356977</td>\n",
       "      <td>0.048788</td>\n",
       "      <td>-0.380051</td>\n",
       "      <td>0.128069</td>\n",
       "      <td>-0.273534</td>\n",
       "      <td>0.291512</td>\n",
       "      <td>-0.444413</td>\n",
       "      <td>-0.441808</td>\n",
       "      <td>-0.177383</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.366087</td>\n",
       "      <td>0.333461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT</th>\n",
       "      <td>0.455621</td>\n",
       "      <td>-0.412995</td>\n",
       "      <td>0.603800</td>\n",
       "      <td>-0.053929</td>\n",
       "      <td>0.590879</td>\n",
       "      <td>-0.613808</td>\n",
       "      <td>0.602339</td>\n",
       "      <td>-0.496996</td>\n",
       "      <td>0.488676</td>\n",
       "      <td>0.543993</td>\n",
       "      <td>0.374044</td>\n",
       "      <td>-0.366087</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.737663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>-0.388305</td>\n",
       "      <td>0.360445</td>\n",
       "      <td>-0.483725</td>\n",
       "      <td>0.175260</td>\n",
       "      <td>-0.427321</td>\n",
       "      <td>0.695360</td>\n",
       "      <td>-0.376955</td>\n",
       "      <td>0.249929</td>\n",
       "      <td>-0.381626</td>\n",
       "      <td>-0.468536</td>\n",
       "      <td>-0.507787</td>\n",
       "      <td>0.333461</td>\n",
       "      <td>-0.737663</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CRIM        ZN     INDUS      CHAS       NOX        RM       AGE  \\\n",
       "CRIM     1.000000 -0.200469  0.406583 -0.055892  0.420972 -0.219247  0.352734   \n",
       "ZN      -0.200469  1.000000 -0.533828 -0.042697 -0.516604  0.311991 -0.569537   \n",
       "INDUS    0.406583 -0.533828  1.000000  0.062938  0.763651 -0.391676  0.644779   \n",
       "CHAS    -0.055892 -0.042697  0.062938  1.000000  0.091203  0.091251  0.086518   \n",
       "NOX      0.420972 -0.516604  0.763651  0.091203  1.000000 -0.302188  0.731470   \n",
       "RM      -0.219247  0.311991 -0.391676  0.091251 -0.302188  1.000000 -0.240265   \n",
       "AGE      0.352734 -0.569537  0.644779  0.086518  0.731470 -0.240265  1.000000   \n",
       "DIS     -0.379670  0.664408 -0.708027 -0.099176 -0.769230  0.205246 -0.747881   \n",
       "RAD      0.625505 -0.311948  0.595129 -0.007368  0.611441 -0.209847  0.456022   \n",
       "TAX      0.582764 -0.314563  0.720760 -0.035587  0.668023 -0.292048  0.506456   \n",
       "PTRATIO  0.289946 -0.391679  0.383248 -0.121515  0.188933 -0.355501  0.261515   \n",
       "B       -0.385064  0.175520 -0.356977  0.048788 -0.380051  0.128069 -0.273534   \n",
       "LSTAT    0.455621 -0.412995  0.603800 -0.053929  0.590879 -0.613808  0.602339   \n",
       "price   -0.388305  0.360445 -0.483725  0.175260 -0.427321  0.695360 -0.376955   \n",
       "\n",
       "              DIS       RAD       TAX   PTRATIO         B     LSTAT     price  \n",
       "CRIM    -0.379670  0.625505  0.582764  0.289946 -0.385064  0.455621 -0.388305  \n",
       "ZN       0.664408 -0.311948 -0.314563 -0.391679  0.175520 -0.412995  0.360445  \n",
       "INDUS   -0.708027  0.595129  0.720760  0.383248 -0.356977  0.603800 -0.483725  \n",
       "CHAS    -0.099176 -0.007368 -0.035587 -0.121515  0.048788 -0.053929  0.175260  \n",
       "NOX     -0.769230  0.611441  0.668023  0.188933 -0.380051  0.590879 -0.427321  \n",
       "RM       0.205246 -0.209847 -0.292048 -0.355501  0.128069 -0.613808  0.695360  \n",
       "AGE     -0.747881  0.456022  0.506456  0.261515 -0.273534  0.602339 -0.376955  \n",
       "DIS      1.000000 -0.494588 -0.534432 -0.232471  0.291512 -0.496996  0.249929  \n",
       "RAD     -0.494588  1.000000  0.910228  0.464741 -0.444413  0.488676 -0.381626  \n",
       "TAX     -0.534432  0.910228  1.000000  0.460853 -0.441808  0.543993 -0.468536  \n",
       "PTRATIO -0.232471  0.464741  0.460853  1.000000 -0.177383  0.374044 -0.507787  \n",
       "B        0.291512 -0.444413 -0.441808 -0.177383  1.000000 -0.366087  0.333461  \n",
       "LSTAT   -0.496996  0.488676  0.543993  0.374044 -0.366087  1.000000 -0.737663  \n",
       "price    0.249929 -0.381626 -0.468536 -0.507787  0.333461 -0.737663  1.000000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 특성과 라벨의 상관관계 분석\n",
    "df_boston.corr()\n",
    "\n",
    "# 양의 값 : 집 값을 상승시키는 정도\n",
    "# 음의 값: 집 값을 떨어뜨리는 정도\n",
    "# 0에 가까운 값 :  집 값과 관련이 없는 특성 -> 삭제, 처리 후에 사용!\n",
    "\n",
    "# 다중공선성\n",
    "#      - 특성간의 공선성 (데이터의 유사성) 문제\n",
    "#      - 특성과 특성 간의 상관관계가 90% 이상인 것\n",
    "#      - 특성과 라벨 간의 상관관계 더 낮은 특성을 삭제하거나 처리\n",
    "#      - 특성과 라벨의 공선성 (데이터의 유사성) 문제\n",
    "#      - 특성과 라벨간의 상관관계가 90% 이상인 것\n",
    "#      - 해당 특성을 삭제하거나 처리\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "683585cf",
   "metadata": {},
   "source": [
    "#### train_test_split : 훈련데이터와 테스트데이터를 분리해주는 함수\n",
    "- 훈련 75%, 테스트 25%로 분리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9263e98e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((379, 13), (127, 13), (379,), (127,))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "# random_state : 랜덤 시드를 설정 (항상 같은 데이터셋을 사용하기 위한 것)\n",
    "X_train, X_test, y_train, y_test = train_test_split(boston[\"data\"], boston[\"target\"], random_state=7)\n",
    "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf72eb9c",
   "metadata": {},
   "source": [
    "## 모델 선택 및 훈련"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a405bb81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor()"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "\n",
    "knn_model4 = KNeighborsRegressor(n_neighbors=5)\n",
    "knn_model4.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e0a167ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "훈련 오차 :  25.2812073878628\n",
      "테스트 오차 :  40.725077165354335\n"
     ]
    }
   ],
   "source": [
    "# 평가(회귀분석에서 평가도구로 오차)\n",
    "# 오차가 작으면 좋은 모델인가요?\n",
    "# 1번 모델의 오차 : 10, -100\n",
    "# 2번 모델의 오차 : 2, 3\n",
    "# -> 음수오차로 인해서 직접 비교하기 어려운 문제\n",
    "# -> 음수를 양수로 변경하는 방법 : \n",
    "#     제곱 -> 평균제곱오차(Mean Squared Error: MSE),\n",
    "#     절대값 -> 평균절대값오차(Mean Absolute Error : MAE)\n",
    "# MSE를 더 사용하는 이유 : 제곱하기 때문에 좋은 모델과 나쁜 모델을 구분하기 쉬움!\n",
    "from sklearn.metrics import mean_squared_error\n",
    "pred_train = knn_model4.predict(X_train)\n",
    "pred_test = knn_model4.predict(X_test)\n",
    "print(\"훈련 오차 : \", mean_squared_error(pred_train, y_train))\n",
    "print(\"테스트 오차 : \", mean_squared_error(pred_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a409f9da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "훈련 오차 :  5.028042102833149\n",
      "테스트 오차 :  6.381620261763805\n"
     ]
    }
   ],
   "source": [
    "# MSE는 제곱을 한 값이라 원래 값이 아님 -> 제곱근 사용\n",
    "import numpy as np\n",
    "print(\"훈련 오차 : \", np.sqrt(mean_squared_error(pred_train, y_train)))\n",
    "print(\"테스트 오차 : \", np.sqrt(mean_squared_error(pred_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed88f2ce",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4909e80",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09ecf411",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "701a6d8e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed9eb7df",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73bae55e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92a90702",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6bb240e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
